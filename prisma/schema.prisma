// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This schema defines the data models for a custom tailoring platform
// where users can order custom clothing from tailors

// User model: Represents platform users (clients, tailors, admins)
model User {
  id                   String       @id @default(uuid()) // Unique identifier for the user
  username             String       @unique              // Username for login, must be unique
  email                String       @unique
  password             String
  phoneNumber          String
  role                 Role 
  authToken            String       @default(uuid())     // Token for authentication sessions
  verified             Boolean      @default(false)      // Indicates if the account has been verified
  verificationToken    String?                           // Token used for account verification
  verificationTokenExpires DateTime?                         // Expiry date for the verification token
  resetPasswordToken   String?                           // Token used for resetting the password
  resetPasswordExpires DateTime?                         // Expiry date for the reset password token
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  media                Media[]
  reviews              Review[]
  Measurement          Measurement?
  Order                Order[]

  @@index([email]) // Index on email for faster queries
}



// Product model: Represents clothing items available for order
model Product {
  id          String   @id @default(uuid()) // Unique identifier for the product
  fabric_id   String
  fabric      Fabric   @relation(fields: [fabric_id], references: [id], onDelete: Cascade)
  productName String
  description String?  @db.Text // Detailed description, optional, supports long text
  price       Float
  location    String
  tailorName  String 
  createdAt   DateTime @default(now()) 
  updatedAt   DateTime @updatedAt
  reviews     Review[]
  media       Media[] // Media files (images/videos) of this product
  Order       Order?
}

// Measurement model: Stores user body measurements for custom tailoring
model Measurement {
  id        String   @id @default(uuid()) // Unique identifier for the measurement set
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String   @unique
  neck      Float
  chest     Float
  waist     Float // Waist measurement in inches/cm (note: typo in field name)
  hips      Float
  inseam    Float
  sleeve    Float
  createdAt DateTime @default(now()) // Timestamp when measurements were recorded
  updatedAt DateTime @default(now())
  Order     Order[]
}

// Order model: Represents a customer's order for custom clothing
model Order {
  id              String      @id @default(uuid()) // Unique identifier for the order
  user_id         String
  user            User        @relation(fields: [user_id], references: [id], onDelete: Cascade) // One to many relationship
  measurement     Measurement @relation(fields: [measurement_id], references: [id], onDelete: Cascade) 
  measurement_id  String      @unique() // ID of the measurement set (1-to-1 relation)
  product_id      String      @unique()
  product         Product     @relation(fields: [product_id], references: [id], onDelete: Cascade)
  status          Float
  deliveryPrice   Float
  totalPrice      Float
  deliveryAddress String
  deliveryDate    DateTime    @default(now())
  orderDate       DateTime    @default(now())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now())
}

// Fabric model: Represents fabric materials available for clothing
model Fabric {
  id          String       @id @default(uuid()) // Unique identifier for the fabric
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  fabricTypes FabricType[] // Types/variations of this fabric
  Product     Product[]
}

// FabricType model: Represents specific variations of a fabric
model FabricType {
  id        String   @id @default(uuid())
  name      String
  fabric_id String
  fabric    Fabric   @relation(fields: [fabric_id], references: [id], onDelete: Cascade) // Reference to parent fabric
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Review model: User reviews for products
model Review {
  id         String   @id @default(uuid()) // Unique identifier for the review
  user_id    String   @unique
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade) // Reference to the user
  rating     Float
  comment    String
  product_id String
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade) // Reference to the product
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Media model: Stores images and videos for products and users
model Media {
  id         String   @id @default(uuid()) // Unique identifier for the media item
  product_id String
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade ) // Reference to the user
  url        String
  type       Type
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Role enum: Defines possible user roles in the system
enum Role {
  CLIENT // Regular customer who orders clothes
  TAILOR // Professional who creates custom clothing
  ADMIN // Administrator with full system access
}

// Type enum: Defines possible media types
enum Type {
  IMAGE
  VIDEO
}
